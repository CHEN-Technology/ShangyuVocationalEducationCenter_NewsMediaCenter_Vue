{
  "version": 3,
  "sources": ["../../embla-carousel-class-names/src/components/Options.ts", "../../embla-carousel-class-names/src/components/utils.ts", "../../embla-carousel-class-names/src/components/ClassNames.ts"],
  "sourcesContent": ["import { CreateOptionsType } from 'embla-carousel'\n\nexport type ClassNameOptionType = string | string[]\n\nexport type ClassNamesListType = {\n  snapped: string[]\n  inView: string[]\n  draggable: string[]\n  dragging: string[]\n  loop: string[]\n}\n\nexport type OptionsType = CreateOptionsType<{\n  [Key in keyof ClassNamesListType]: ClassNameOptionType\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  snapped: 'is-snapped',\n  inView: 'is-in-view',\n  draggable: 'is-draggable',\n  dragging: 'is-dragging',\n  loop: 'is-loop'\n}\n", "import { ClassNameOptionType } from './Options'\n\nexport function normalizeClassNames(classNames: ClassNameOptionType): string[] {\n  const normalized = Array.isArray(classNames) ? classNames : [classNames]\n  return normalized.filter(Boolean)\n}\n\nexport function removeClass(node: HTMLElement, classNames: string[]): void {\n  if (!node || !classNames.length) return\n  node.classList.remove(...classNames)\n}\n\nexport function addClass(node: HTMLElement, classNames: string[]): void {\n  if (!node || !classNames.length) return\n  node.classList.add(...classNames)\n}\n", "import { defaultOptions, OptionsType, ClassNamesListType } from './Options'\nimport { addClass, normalizeClassNames, removeClass } from './utils'\nimport {\n  CreatePluginType,\n  OptionsHandlerType,\n  EmblaCarouselType,\n  EmblaEventType\n} from 'embla-carousel'\n\ndeclare module 'embla-carousel' {\n  interface EmblaPluginsType {\n    classNames: ClassNamesType\n  }\n}\n\nexport type ClassNamesType = CreatePluginType<{}, OptionsType>\n\nexport type ClassNamesOptionsType = ClassNamesType['options']\n\nfunction ClassNames(userOptions: ClassNamesOptionsType = {}): ClassNamesType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let root: HTMLElement\n  let slides: HTMLElement[]\n  let snappedIndexes: number[] = []\n  let inViewIndexes: number[] = []\n\n  const selectedEvents: EmblaEventType[] = ['select']\n  const draggingEvents: EmblaEventType[] = ['pointerDown', 'pointerUp']\n  const inViewEvents: EmblaEventType[] = ['slidesInView']\n  const classNames: ClassNamesListType = {\n    snapped: [],\n    inView: [],\n    draggable: [],\n    dragging: [],\n    loop: []\n  }\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, ClassNames.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    root = emblaApi.rootNode()\n    slides = emblaApi.slideNodes()\n\n    const { watchDrag, loop } = emblaApi.internalEngine().options\n    const isDraggable = !!watchDrag\n\n    if (options.loop && loop) {\n      classNames.loop = normalizeClassNames(options.loop)\n      addClass(root, classNames.loop)\n    }\n\n    if (options.draggable && isDraggable) {\n      classNames.draggable = normalizeClassNames(options.draggable)\n      addClass(root, classNames.draggable)\n    }\n\n    if (options.dragging) {\n      classNames.dragging = normalizeClassNames(options.dragging)\n      draggingEvents.forEach((evt) => emblaApi.on(evt, toggleDraggingClass))\n    }\n\n    if (options.snapped) {\n      classNames.snapped = normalizeClassNames(options.snapped)\n      selectedEvents.forEach((evt) => emblaApi.on(evt, toggleSnappedClasses))\n      toggleSnappedClasses()\n    }\n\n    if (options.inView) {\n      classNames.inView = normalizeClassNames(options.inView)\n      inViewEvents.forEach((evt) => emblaApi.on(evt, toggleInViewClasses))\n      toggleInViewClasses()\n    }\n  }\n\n  function destroy(): void {\n    draggingEvents.forEach((evt) => emblaApi.off(evt, toggleDraggingClass))\n    selectedEvents.forEach((evt) => emblaApi.off(evt, toggleSnappedClasses))\n    inViewEvents.forEach((evt) => emblaApi.off(evt, toggleInViewClasses))\n\n    removeClass(root, classNames.loop)\n    removeClass(root, classNames.draggable)\n    removeClass(root, classNames.dragging)\n    toggleSlideClasses([], snappedIndexes, classNames.snapped)\n    toggleSlideClasses([], inViewIndexes, classNames.inView)\n\n    Object.keys(classNames).forEach((classNameKey) => {\n      const key = <keyof ClassNamesListType>classNameKey\n      classNames[key] = []\n    })\n  }\n\n  function toggleDraggingClass(\n    _: EmblaCarouselType,\n    evt: EmblaEventType\n  ): void {\n    const toggleClass = evt === 'pointerDown' ? addClass : removeClass\n    toggleClass(root, classNames.dragging)\n  }\n\n  function toggleSlideClasses(\n    addClassIndexes: number[] = [],\n    removeClassIndexes: number[] = [],\n    classNames: string[]\n  ): number[] {\n    const removeClassSlides = removeClassIndexes.map((index) => slides[index])\n    const addClassSlides = addClassIndexes.map((index) => slides[index])\n\n    removeClassSlides.forEach((slide) => removeClass(slide, classNames))\n    addClassSlides.forEach((slide) => addClass(slide, classNames))\n\n    return addClassIndexes\n  }\n\n  function toggleSnappedClasses(): void {\n    const { slideRegistry } = emblaApi.internalEngine()\n    const newSnappedIndexes = slideRegistry[emblaApi.selectedScrollSnap()]\n\n    snappedIndexes = toggleSlideClasses(\n      newSnappedIndexes,\n      snappedIndexes,\n      classNames.snapped\n    )\n  }\n\n  function toggleInViewClasses(): void {\n    const newInViewIndexes = emblaApi.slidesInView()\n\n    inViewIndexes = toggleSlideClasses(\n      newInViewIndexes,\n      inViewIndexes,\n      classNames.inView\n    )\n  }\n\n  const self: ClassNamesType = {\n    name: 'classNames',\n    options: userOptions,\n    init,\n    destroy\n  }\n  return self\n}\n\ndeclare namespace ClassNames {\n  let globalOptions: ClassNamesOptionsType | undefined\n}\n\nClassNames.globalOptions = undefined\n\nexport default ClassNames\n"],
  "mappings": "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",
  "names": ["defaultOptions", "active", "breakpoints", "snapped", "inView", "draggable", "dragging", "loop", "normalizeClassNames", "classNames", "normalized", "Array", "isArray", "filter", "Boolean", "removeClass", "node", "length", "classList", "remove", "addClass", "add", "ClassNames", "userOptions", "options", "emblaApi", "root", "slides", "snappedIndexes", "inViewIndexes", "selectedEvents", "draggingEvents", "inViewEvents", "init", "emblaApiInstance", "optionsHandler", "mergeOptions", "optionsAtMedia", "optionsBase", "globalOptions", "allOptions", "rootNode", "slideNodes", "watchDrag", "internalEngine", "isDraggable", "forEach", "evt", "on", "toggleDraggingClass", "toggleSnappedClasses", "toggleInViewClasses", "destroy", "off", "toggleSlideClasses", "Object", "keys", "classNameKey", "key", "_", "toggleClass", "addClassIndexes", "removeClassIndexes", "removeClassSlides", "map", "index", "addClassSlides", "slide", "slideRegistry", "newSnappedIndexes", "selectedScrollSnap", "newInViewIndexes", "slidesInView", "self", "name", "undefined"]
}
